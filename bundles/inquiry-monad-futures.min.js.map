{"version":3,"sources":["webpack://InquiryMonadFutures/webpack/universalModuleDefinition","webpack://InquiryMonadFutures/webpack/bootstrap","webpack://InquiryMonadFutures/./node_modules/inquiry-monad/built/symbols.js","webpack://InquiryMonadFutures/./node_modules/inquiry-monad/node_modules/simple-maybe/src/index.js","webpack://InquiryMonadFutures/./node_modules/inquiry-monad/built/index.js","webpack://InquiryMonadFutures/external \"Future\"","webpack://InquiryMonadFutures/./node_modules/simple-maybe/src/index.js","webpack://InquiryMonadFutures/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$$inquirySymbol","Symbol","$$questionsetSymbol","$$questionSymbol","$$passSymbol","$$failSymbol","$$iouSymbol","$$receiptSymbol","Just","x","isJust","isNothing","inspect","_","map","f","Maybe","of","ap","y","chain","join","fork","g","sequence","Nothing","undefined","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","simple_maybe_1","symbols_1","noop","$$notFoundSymbol","IOU","concat","head","Array","isArray","length","tail","isEmpty","Boolean","[object Object]","Pass","fold","answer","Inquiry","informant","subject","fail","iou","pass","questionset","receipt","Receipt","Fail","Question","extract","QuestionOf","console","error","questionTypeError","exportQuestion","Questionset","find","a","RegExp","test","b","warn","exportQuestionset","questionsetTypeError","InquirySubject","inquire","fnName","extractName","fExtractFn","inquireResponse","resp","warnNotPassFail","inquireMap","reduce","inq","ii","inquireAll","questions","q","using","swap","unison","breakpoint","milestone","conclude","cleared","faulted","suffice","scratch","zip","exportInquiry","warnTypeError","InquiryPSubject","InquiryP","InquiryPOf","warnTypeErrorP","buildInq","vals","acc","cur","resolveQs","inquireIOU","response","syncronousResult","all","catch","err","await","t","Infinity","timeLimit","setTimeout","awaitPromises","race","exportInquiryP","fluture_1","Future","inquiry_monad_1","buildInqF","InquiryF","InquiryFSubject","parallel","promise","exportInquiryF","warnTypeErrorF"],"mappings":"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","file":"inquiry-monad-futures.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Future\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"InquiryMonadFutures\", [\"Future\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InquiryMonadFutures\"] = factory(require(\"Future\"));\n\telse\n\t\troot[\"InquiryMonadFutures\"] = factory(root[\"Future\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.$$inquirySymbol = Symbol();\nexports.$$questionsetSymbol = Symbol();\nexports.$$questionSymbol = Symbol();\nexports.$$passSymbol = Symbol();\nexports.$$failSymbol = Symbol();\nexports.$$iouSymbol = Symbol();\nexports.$$receiptSymbol = Symbol();\n//# sourceMappingURL=symbols.js.map","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst simple_maybe_1 = require(\"simple-maybe\");\nconst symbols_1 = require(\"./symbols\");\nexports.$$inquirySymbol = symbols_1.$$inquirySymbol;\nexports.$$questionSymbol = symbols_1.$$questionSymbol;\nexports.$$passSymbol = symbols_1.$$passSymbol;\nexports.$$failSymbol = symbols_1.$$failSymbol;\nconst noop = () => { };\nconst $$notFoundSymbol = Symbol('Not found');\nconst IOU = (x) => ({\n    map: (f) => IOU(f(x)),\n    chain: (f) => f(x),\n    ap: (y) => y.map(x),\n    inspect: () => `IOU(${x})`,\n    join: () => x,\n    concat: (o) => o.chain((r) => IOU(x.concat(r))),\n    head: () => Array.isArray(x) && x.length ? x[0] : [],\n    tail: () => Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    [symbols_1.$$inquirySymbol]: false,\n    [symbols_1.$$passSymbol]: false,\n    [symbols_1.$$failSymbol]: false,\n    [symbols_1.$$iouSymbol]: true\n});\nexports.IOU = IOU;\nconst Pass = (x) => ({\n    map: (f) => Pass(f(x)),\n    chain: (f) => f(x),\n    fold: (f, _) => f(x),\n    fork: (_, f) => f(x),\n    head: () => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: () => Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: () => x,\n    inspect: () => `Pass(${x})`,\n    concat: (o) => o.fold((r) => Pass(x.concat(r)), noop),\n    ap: (y) => y[symbols_1.$$passSymbol] ? y.concat(Pass(x)) : Pass(x),\n    answer: (i, n = '(anonymous)', c = Inquiry) => {\n        i.informant([n, Pass(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail,\n            iou: i.iou,\n            pass: i.pass.concat(Pass(x)),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Pass(x)]]))\n        });\n    },\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    [symbols_1.$$passSymbol]: true,\n    [symbols_1.$$failSymbol]: false,\n    [symbols_1.$$iouSymbol]: false,\n    [symbols_1.$$inquirySymbol]: false\n});\nexports.Pass = Pass;\nconst Fail = (x) => ({\n    map: (f) => Fail(f(x)),\n    chain: (f) => f(x),\n    fold: (_, f) => f(x),\n    fork: (f, _) => f(x),\n    head: () => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: () => Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: () => x,\n    inspect: () => `Fail(${x})`,\n    concat: (o) => o.fork((r) => Fail(x.concat(r)), noop),\n    ap: (y) => y[symbols_1.$$passSymbol] ? Fail(x) : y.concat(Fail(x)),\n    answer: (i, n = '(anonymous)', c = Inquiry) => {\n        i.informant([n, Fail(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail.concat(Fail(x)),\n            pass: i.pass,\n            iou: i.iou,\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Fail(x)]]))\n        });\n    },\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    [symbols_1.$$passSymbol]: false,\n    [symbols_1.$$failSymbol]: true,\n    [symbols_1.$$iouSymbol]: false,\n    [symbols_1.$$inquirySymbol]: false\n});\nexports.Fail = Fail;\nconst Receipt = (x) => ({\n    map: (f) => Receipt(f(x)),\n    chain: (f) => f(x),\n    fold: (_, f) => f(x),\n    fork: (f, _) => f(x),\n    head: () => x[0],\n    tail: () => x[x.length - 1],\n    join: () => x,\n    inspect: () => `Receipt(${x})`,\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    concat: (o) => o.chain((r) => Receipt(x.concat(r))),\n    ap: (y) => y.map(x),\n    [symbols_1.$$inquirySymbol]: false,\n    [symbols_1.$$receiptSymbol]: true\n});\nexports.Receipt = Receipt;\nconst questionTypeError = (x) => console.error('Question must be passed parameters that adhere to the documented type. Value that was passed:', x);\nconst Question = (x) => ({\n    map: (f) => Question(f(x)),\n    chain: (f) => f(x),\n    ap: (y) => y.map(x),\n    inspect: () => `Question(${x})`,\n    join: () => x,\n    call: (i) => x[1](i.join().subject.join()),\n    extract: () => x[1],\n    name: () => x[0],\n    [symbols_1.$$questionSymbol]: true\n});\nconst QuestionOf = (x) => Array.isArray(x) ? Question(x) : questionTypeError(x);\nconst exportQuestion = {\n    of: QuestionOf\n};\nexports.Question = exportQuestion;\nconst Questionset = (x) => ({\n    map: (f) => Questionset(f(x)),\n    chain: (f) => f(x),\n    ap: (y) => y.map(x),\n    inspect: () => `Questionset(${x})`,\n    join: () => x,\n    concat: (o) => o.chain((r) => Questionset(x.concat(r))),\n    find: (a) => simple_maybe_1.Maybe.of(x.find(i => RegExp(i[0]).test(a)))\n        .map((b) => b[1])\n        .fork(() => {\n        console.warn('Question was not found: ', a);\n        return $$notFoundSymbol;\n    }, (c) => c),\n    [symbols_1.$$questionsetSymbol]: true\n});\nconst questionsetTypeError = (x) => console.error('Questionset must be passed parameters that adhere to the documented type. Value that was passed:', x);\nconst QuestionsetOf = (x) => Array.isArray(x) ? Questionset(x) : questionsetTypeError(x);\nconst exportQuestionset = {\n    of: QuestionsetOf\n};\nexports.Questionset = exportQuestionset;\nconst InquirySubject = (x) => x[symbols_1.$$inquirySymbol]\n    ? x\n    : Inquiry({\n        subject: simple_maybe_1.Maybe.of(x),\n        fail: Fail([]),\n        pass: Pass([]),\n        iou: IOU([]),\n        informant: (_) => _,\n        questionset: Questionset([['', noop]]),\n        receipt: Receipt([])\n    });\nconst warnTypeError = (x) => {\n    console.warn('Inquiry.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to Inquiry.subject().');\n    return InquirySubject(x);\n};\n// @todo validate constructor via Symbol\n// @todo add receipts property\nconst InquiryOf = (x) => 'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n    ? Inquiry(x)\n    : warnTypeError(x);\nconst Inquiry = (x) => ({\n    // Inquire: core method\n    // You may pass a Function, a QuestionMonad (with a function), or a string which will look up\n    //  in the current Inquiry's questionset.\n    inquire: (f) => {\n        const extractName = (f) => f[symbols_1.$$questionSymbol]\n            ? f.name()\n            : f;\n        const fnName = typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = f[symbols_1.$$questionSymbol]\n            ? f.extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : x.questionset.find(fExtractFn);\n        const warnNotPassFail = (resp) => {\n            console.warn('inquire was passed a function that does not return Pass or Fail:', fnName);\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n        const inquireResponse = typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n        return inquireResponse[symbols_1.$$failSymbol] ||\n            inquireResponse[symbols_1.$$passSymbol] ||\n            inquireResponse[symbols_1.$$inquirySymbol]\n            ? inquireResponse.answer(x, fnName, Inquiry)\n            : warnNotPassFail([inquireResponse, fnName]);\n    },\n    inquireMap: (f, i) => i.reduce((inq, ii) => {\n        const extractName = (f) => f[symbols_1.$$questionSymbol]\n            ? f.name()\n            : f;\n        const fnName = typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = f[symbols_1.$$questionSymbol]\n            ? f.extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : x.questionset.find(fExtractFn);\n        const warnNotPassFail = (resp) => {\n            console.warn('inquire was passed a function that does not return Pass or Fail:', fnName);\n            console.warn('response was:', resp);\n            return inq;\n        };\n        const inquireResponse = typeof inquire === 'function'\n            ? inquire(ii)(inq.join().subject.join())\n            : {};\n        // each return aggregates new contained value through exit\n        return inquireResponse[symbols_1.$$failSymbol] ||\n            inquireResponse[symbols_1.$$passSymbol] ||\n            inquireResponse[symbols_1.$$inquirySymbol]\n            ? inquireResponse.answer(inq.join(), fnName, Inquiry)\n            : warnNotPassFail([inquireResponse, fnName]);\n    }, \n    // initial Inquiry will be what is in `x` now\n    Inquiry({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    })),\n    inquireAll: () => x.questionset.chain((questions) => questions.reduce((inq, q) => inq.inquire(QuestionOf(q)), Inquiry(x))),\n    using: (a) => Inquiry({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: x.informant,\n        questionset: a,\n        receipt: x.receipt\n    }),\n    // Informant: for spying/logging/observable\n    informant: (f) => Inquiry({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: f,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    inspect: () => `Inquiry(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n    // Flow control: swap pass/fail\n    swap: () => Inquiry({\n        subject: x.subject,\n        iou: x.iou,\n        fail: Fail(x.pass.join()),\n        pass: Pass(x.fail.join()),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    // Mapping across both branches\n    unison: (f) => // apply a single map to both fail & pass (e.g. sort)\n     Inquiry({\n        subject: x.subject,\n        iou: x.iou,\n        fail: Fail(f(x.fail.join())),\n        pass: Pass(f(x.pass.join())),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    // standard Monad methods\n    map: (f) => InquirySubject(f(x)),\n    ap: (y) => y.map(x),\n    chain: (f) => f(x),\n    join: () => x,\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f) => x.fail.join().length ? Inquiry(f(x)) : Inquiry(x),\n    // execute the provided function if there are passes, else continue\n    milestone: (f) => x.pass.join().length ? Inquiry(f(x)) : Inquiry(x),\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i, n, _) => {\n        i.informant([n, Inquiry(x)]);\n        return Inquiry({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n    // Unwrap methods\n    // unwraps, mapping for both branches, full value returned\n    conclude: (f, g) => ({\n        subject: x.subject,\n        iou: x.iou,\n        fail: f(x.fail),\n        pass: g(x.pass),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    // If there are no fails, handoff aggregated passes to supplied function; if any fails, return noop\n    cleared: (f) => x.fail.isEmpty() ? f(x.pass) : noop(),\n    // If there are fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f) => x.fail.isEmpty() ? noop() : f(x.fail),\n    // If there are passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f) => x.pass.isEmpty() ? noop() : f(x.pass),\n    // If there are no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f) => x.pass.isEmpty() ? f(x.fail) : noop(),\n    // unwrap left if any fails, right if not\n    fork: (f, g) => x.fail.join().length ? f(x.fail) : g(x.pass),\n    // unwrap left if any passes, right if not\n    fold: (f, g) => x.pass.join().length ? f(x.pass) : g(x.fail),\n    // return a merged pass/fail\n    zip: (f) => f(x.fail.join().concat(x.pass.join())),\n    [symbols_1.$$inquirySymbol]: true\n});\nconst exportInquiry = {\n    subject: InquirySubject,\n    of: InquiryOf\n};\nexports.Inquiry = exportInquiry;\nconst InquiryPSubject = (x) => x[symbols_1.$$inquirySymbol]\n    ? x\n    : InquiryP({\n        subject: simple_maybe_1.Maybe.of(x),\n        fail: Fail([]),\n        pass: Pass([]),\n        iou: IOU([]),\n        informant: (_) => _,\n        questionset: Questionset([['', noop]]),\n        receipt: Receipt([])\n    });\nconst warnTypeErrorP = (x) => {\n    console.warn('InquiryP.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to InquiryP.subject().');\n    return InquiryPSubject(x);\n};\nconst InquiryPOf = (x) => 'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n    ? InquiryP(x)\n    : warnTypeErrorP(x);\nconst buildInq = (x) => (vals) => vals.reduce((acc, cur) => cur[1].answer(acc, cur[0], InquiryP).join(), x);\n// this is a bit complex, so here it goes:\n// Take all our IOUs (Questions), extract and resolve their Promises\n// then take those results apply to a tuple with the question name/description\nconst resolveQs = (x) => x.iou.join().map((q) => q\n    .extract()()\n    .then((result) => Promise.resolve([q.name(), result])));\nconst InquiryP = (x) => ({\n    inquire: (f) => {\n        const extractName = (f) => f[symbols_1.$$questionSymbol]\n            ? f.name()\n            : f;\n        const fnName = typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = f[symbols_1.$$questionSymbol]\n            ? f.extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : x.questionset.find(fExtractFn);\n        const warnNotPassFail = (resp) => {\n            console.warn('inquire was passed a function that does not return Pass or Fail:', fnName);\n            console.warn('response was:', resp);\n            return InquiryP(x);\n        };\n        const inquireResponse = typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n        const syncronousResult = (response) => response[symbols_1.$$failSymbol] ||\n            response[symbols_1.$$passSymbol] ||\n            response[symbols_1.$$inquirySymbol]\n            ? response.answer(x, fnName, InquiryP)\n            : warnNotPassFail([inquireResponse, fnName]);\n        const inquireIOU = inquireResponse.then\n            ? QuestionOf([fnName, () => inquireResponse])\n            : false;\n        return inquireIOU\n            ? InquiryP({\n                subject: x.subject,\n                fail: x.fail,\n                pass: x.pass,\n                iou: x.iou.concat(IOU([inquireIOU])),\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n            : syncronousResult(inquireResponse);\n    },\n    inquireMap: (f, i) => i.reduce((inq, ii) => {\n        const extractName = (f) => f[symbols_1.$$questionSymbol]\n            ? f.name()\n            : f;\n        const fnName = typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = f[symbols_1.$$questionSymbol]\n            ? f.extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : x.questionset.find(fExtractFn);\n        const warnNotPassFail = (resp) => {\n            console.warn('inquire was passed a function that does not return Pass or Fail:', fnName);\n            console.warn('response was:', resp);\n            return inq;\n        };\n        const inquireResponse = typeof inquire === 'function'\n            ? inquire(ii)(inq.join().subject.join())\n            : {};\n        const syncronousResult = (response) => response[symbols_1.$$failSymbol] ||\n            response[symbols_1.$$passSymbol] ||\n            response[symbols_1.$$inquirySymbol]\n            ? response.answer(inq.join(), fnName, InquiryP)\n            : Pass(response).answer(x, fnName, InquiryP); // @todo this should be warNotPassFail\n        return inquireResponse.then\n            ? InquiryP({\n                subject: inq.join().subject,\n                fail: inq.join().fail,\n                pass: inq.join().pass,\n                iou: inq.join().iou.concat(IOU([inquireResponse])),\n                informant: inq.join().informant,\n                questionset: inq.join().questionset,\n                receipt: inq.join().receipt\n            })\n            : syncronousResult(inquireResponse);\n    }, \n    // initial Inquiry will be what is in `x` now\n    InquiryP({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    })),\n    inquireAll: () => x.questionset.chain((questions) => questions.reduce((inq, q) => inq.inquire(QuestionOf(q)), InquiryP(x))),\n    using: (a) => InquiryP({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: x.informant,\n        questionset: a,\n        receipt: x.receipt\n    }),\n    // Informant: for spying/logging/observable\n    informant: (f) => InquiryP({\n        subject: x.subject,\n        iou: x.iou,\n        fail: x.fail,\n        pass: x.pass,\n        informant: f,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    inspect: () => `InquiryP(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: () => InquiryP({\n        subject: x.subject,\n        iou: x.iou,\n        fail: Fail(x.pass.join()),\n        pass: Pass(x.fail.join()),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    // Mapping across both branches\n    unison: (f) => // apply a single map to both fail & pass (e.g. sort), iou untouched\n     InquiryP({\n        subject: x.subject,\n        iou: x.iou,\n        fail: Fail(f(x.fail.join())),\n        pass: Pass(f(x.pass.join())),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f) => InquiryPSubject(f(x)),\n    ap: (y) => y.map(x),\n    chain: (f) => f(x),\n    join: () => x,\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f) => x.fail.join().length ? InquiryP(f(x)) : InquiryP(x),\n    // execute the provided function if there are passes, else continue\n    milestone: (f) => x.pass.join().length ? InquiryP(f(x)) : InquiryP(x),\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i, n, _) => {\n        i.informant([n, InquiryP(x)]);\n        return InquiryP({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n    // Unwrapping methods: all return Promises, all complete outstanding IOUs\n    // @todo handle Promise.reject? Is it a failure or what?\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: (f, g) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => ({\n            subject: y.subject,\n            iou: y.iou,\n            fail: f(y.fail),\n            pass: g(y.pass),\n            informant: y.informant,\n            questionset: y.questionset,\n            receipt: y.receipt\n        }));\n    }),\n    // If no fails, handoff aggregated passes to supplied function; if fails, return noop\n    cleared: (f) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? f(y.pass) : noop()))\n            .catch(err => console.error('err', err));\n    }),\n    // If fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? noop() : f(y.fail)));\n    }),\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? noop() : f(y.pass)))\n            .catch(err => console.error('err', err));\n    }),\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? f(y.fail) : noop()));\n    }),\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: (f, g) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.join().length ? f(y.fail) : g(y.pass)));\n    }),\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: (f, g) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.join().length ? f(y.pass) : g(y.fail)));\n    }),\n    // return a Promise containing a merged fail/pass resultset array\n    zip: (f) => __awaiter(this, void 0, void 0, function* () {\n        return Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then(y => f(y.fail.join().concat(y.pass.join())));\n    }),\n    // await all IOUs to resolve, then return a new Inquiry CONVERTS TO PROMISE!\n    await: (t = Infinity) => __awaiter(this, void 0, void 0, function* () {\n        // try: generator function. Each IOU = array in for loop as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\n        const timeLimit = new Promise((resolve, reject) => setTimeout(resolve, t, [\n            'timeout',\n            Fail('Promise(s) have timed out')\n        ]));\n        const awaitPromises = Promise.all(resolveQs(x));\n        return (Promise.race([timeLimit, awaitPromises])\n            // @ts-ignore\n            .then(buildInq(x))\n            .then((i) => (i[symbols_1.$$inquirySymbol] ? i.join() : i))\n            .then((y) => InquiryPOf(y)));\n    }),\n    [symbols_1.$$inquirySymbol]: true\n});\nconst exportInquiryP = {\n    subject: InquiryPSubject,\n    of: InquiryPOf\n};\nexports.InquiryP = exportInquiryP;\n//# sourceMappingURL=index.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","import { Maybe } from 'simple-maybe';\nimport { Future } from 'fluture';\nimport { Pass, Fail, IOU, Questionset, Question, Receipt } from 'inquiry-monad';\n\nimport {\n    Monad,\n    InquiryMonad,\n    IOUMonad,\n    PassFailMonad,\n    PassMonad,\n    FailMonad,\n    InquiryValue,\n    ReceiptMonad,\n    ReceiptValue,\n    QuestionsetMonad,\n    QuestionMonad,\n    QuestionValue\n} from 'inquiry-monad/built/inquiry-monad';\n\nimport {\n    $$inquirySymbol,\n    $$questionsetSymbol,\n    $$questionSymbol,\n    $$passSymbol,\n    $$failSymbol,\n    $$iouSymbol,\n    $$receiptSymbol\n} from 'inquiry-monad/built/symbols';\n\nconst noop = (): void => {};\n\nconst buildInqF = <T>(x: T) => (vals: Array<any>) =>\n    vals.reduce((acc, cur) => cur[1].answer(acc, '(async fn)', InquiryF), x);\n\n// this is a bit complex, so here it goes:\n// Take all our IOUs (Questions), extract and resolve their Futures\n// then take those results apply to a tuple with the question name/description and result\nconst resolveQs = (x: InquiryValue) =>\n    x.iou.join().map(\n        (q: QuestionMonad): any =>\n            q\n                .extract()()\n                .chain((f: Future<any, any>) => Future.of([q.name(), f]))\n    );\n\nconst InquiryFSubject = (x: any | InquiryMonad): InquiryMonad =>\n    x[$$inquirySymbol]\n        ? x\n        : InquiryF({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset.of([['', noop]]),\n              receipt: Receipt([])\n          });\n\nconst warnTypeErrorF = <T>(x: T) => {\n    console.warn(\n        'InquiryF.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to InquiryF.subject().'\n    );\n    return InquiryFSubject(x);\n};\n\nconst InquiryFOf = (x: InquiryValue) =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n        ? InquiryF(x)\n        : warnTypeErrorF(x);\n\nconst InquiryF = (x: InquiryValue): InquiryMonad => ({\n    // Inquire: core method\n\n    inquire: (f: Function | string | QuestionMonad) => {\n        const extractName = (f: string | QuestionMonad) =>\n            (f as QuestionMonad)[$$questionSymbol]\n                ? (f as QuestionMonad).name()\n                : f;\n        const fnName =\n            typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return InquiryF(x);\n        };\n\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        const syncronousResult = (response: any): InquiryMonad =>\n            response[$$failSymbol] ||\n            response[$$passSymbol] ||\n            response[$$inquirySymbol]\n                ? response.answer(x, fnName, InquiryF)\n                : warnNotPassFail([inquireResponse, fnName]);\n\n        const inquireIOU =\n            inquireResponse instanceof Future\n                ? Question.of([fnName as string, () => inquireResponse])\n                : false;\n\n        return inquireIOU\n            ? InquiryF({\n                  subject: x.subject,\n                  fail: x.fail,\n                  pass: x.pass,\n                  iou: x.iou.concat(IOU([inquireIOU])),\n                  informant: x.informant,\n                  questionset: x.questionset,\n                  receipt: x.receipt\n              })\n            : syncronousResult(inquireResponse);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const extractName = (f: string | QuestionMonad) =>\n                    (f as QuestionMonad)[$$questionSymbol]\n                        ? (f as QuestionMonad).name()\n                        : f;\n                const fnName =\n                    typeof f === 'function' ? f.name || 'anon' : extractName(f);\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n                const warnNotPassFail = (resp: any) => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                const syncronousResult = (response: any): InquiryMonad =>\n                    response[$$failSymbol] ||\n                    response[$$passSymbol] ||\n                    response[$$inquirySymbol]\n                        ? response.answer(inq.join(), fnName, InquiryF)\n                        : Pass(response).answer(x, fnName, InquiryF); // @todo this should be warNotPassFail\n\n                return inquireResponse instanceof Future\n                    ? InquiryF({\n                          subject: inq.join().subject,\n                          fail: inq.join().fail,\n                          pass: inq.join().pass,\n                          iou: inq.join().iou.concat(IOU([inquireResponse])),\n                          informant: inq.join().informant,\n                          questionset: inq.join().questionset,\n                          receipt: inq.join().receipt\n                      })\n                    : syncronousResult(inquireResponse);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            InquiryF({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n        ),\n\n    inquireAll: (): InquiryMonad =>\n        (x.questionset as QuestionsetMonad).chain(\n            (questions: Array<QuestionValue>): InquiryMonad =>\n                questions.reduce(\n                    (inq: InquiryMonad, q: QuestionValue): InquiryMonad =>\n                        inq.inquire(Question.of(q)),\n                    InquiryF(x)\n                )\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        InquiryF({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a,\n            receipt: x.receipt\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function) =>\n        InquiryF({\n            // @todo accept array of functions instead, or have a plural version\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    inspect: (): string =>\n        `InquiryF(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: (): InquiryMonad =>\n        InquiryF({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort), iou untouched\n        InquiryF({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f: Function): InquiryMonad => InquiryFSubject(f(x)), // cast required for now\n    ap: (y: Monad) => y.map(x),\n    chain: (f: Function) => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function) => (x.fail.join().length ? f(x) : InquiryF(x)),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function) => (x.pass.join().length ? f(x) : InquiryF(x)),\n\n    // internal method: execute informant, return new InquiryF() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, InquiryF(x)]);\n        return InquiryF({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n\n    // Unwrapping methods: all return Futures, all complete outstanding IOUs\n\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: (f: Function, g: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, x.iou.join())\n            .map(buildInqF(x))\n            .map((i: any) => (i[$$inquirySymbol] ? i.join() : i))\n            .fork(console.error, (y: InquiryValue) => ({\n                subject: y.subject,\n                iou: y.iou,\n                fail: f(y.fail),\n                pass: g(y.pass),\n                informant: y.informant,\n                questionset: y.questionset,\n                receipt: y.receipt\n            })),\n\n    // If no fails, handoff aggregated passes to supplied function; if fails, return existing InquiryF\n    cleared: (f: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, x.iou.join())\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.fail.isEmpty() ? f(y.pass) : InquiryF(y)\n            ),\n\n    // If fails, handoff aggregated fails to supplied function; if no fails, return existing InquiryF\n    faulted: (f: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.fail.isEmpty() ? InquiryF(y) : f(y.fail)\n            ),\n\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return existing InquiryF\n    suffice: (f: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.pass.isEmpty() ? InquiryF(y) : f(y.pass)\n            ),\n\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return existing InquiryF\n    scratch: (f: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.pass.isEmpty() ? f(y.fail) : InquiryF(y)\n            ),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: (f: Function, g: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.fail.join().length ? f(y.fail) : g(y.pass)\n            ),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: (f: Function, g: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(\n                console.error,\n                (y: InquiryValue) =>\n                    y.pass.join().length ? f(y.pass) : g(y.fail)\n            ),\n\n    // return a Future containing a merged fail/pass resultset array\n    zip: (f: Function): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .map(\n                <T>(i: T | InquiryMonad) =>\n                    $$inquirySymbol in (i as T) ? (i as InquiryMonad).join() : i\n            )\n            .fork(console.error, (y: InquiryValue) =>\n                f(y.fail.join().concat(y.pass.join()))\n            ),\n\n    // resolves all IOUs, returns a Promise\n    // @ts-ignore @todo add .promise as optional part of an Inquiry\n    promise: (): Future<any, any> =>\n        // @ts-ignore\n        Future.parallel(Infinity, resolveQs(x))\n            .map(buildInqF(x))\n            .promise(),\n\n    // @ts-ignore\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiryF = {\n    subject: InquiryFSubject,\n    of: InquiryFOf\n};\n\nexport {\n    exportInquiryF as InquiryF,\n    Pass,\n    Fail,\n    IOU,\n    Future,\n    $$inquirySymbol,\n    Questionset,\n    Question,\n    Receipt\n};\n"],"sourceRoot":""}